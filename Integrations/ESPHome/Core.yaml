substitutions:
  version: "24.11.9.1"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
  reboot_timeout: 0s
  on_client_connected:
    then:
      - if:
          condition:
            or:
              - binary_sensor.is_on: ota_mode
              - switch.is_on: prevent_sleep
          then:
            - lambda: |- 
                ESP_LOGW("Apollo", "Preventing Deep Sleep Due To OTA Or Switch");
                id(deep_sleep_1).prevent_deep_sleep(); 
          else:
            - lambda: |-
                id(reportAllValues).execute();
            - deep_sleep.enter:
                id: deep_sleep_1

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: runTest
    restore_value: yes
    type: bool
    initial_value: "true"
  - id: testCycleCount
    type: int
    restore_value: no
    initial_value: "0"
  - id: aht20
    restore_value: no
    type: bool
    initial_value: "false"
  - id: ltr390lightPassed
    restore_value: no
    type: bool
    initial_value: "false"
  - id: ltr390uvindexPassed
    restore_value: no
    type: bool
    initial_value: "false"


captive_portal:

web_server:
  port: 80

i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a

one_wire:
  - platform: gpio
    pin: GPIO5

output:
  - platform: ledc
    pin: GPIO10
    id: buzzer
rtttl:
 output: buzzer

number:
  - platform: template
    name: Air Temperature Offset
    id: aht_temperature_offset
    restore_value: true
    initial_value: 0.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "Â°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: Air Humidity Offset
    id: aht_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    id: wet_voltage
    name: 100% Water Voltage
    initial_value: '1.55'
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
    restore_value: true
    entity_category: "CONFIG"
    min_value: 0.0
    max_value: 5.0
  - platform: template
    id: dry_voltage
    name: Dry Voltage
    initial_value: '2.7'
    restore_value: true
    entity_category: "CONFIG"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
    min_value: 0.0
    max_value: 5.0

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(testCycleCount) = 0;
              id(runTest) = true;
              id(prevent_sleep).turn_on();
              id(factory_reset_switch).turn_on();
            }
            else if (millis() - id(button_press_timestamp) >= 3000) {
              //Turn Prevent Sleep On
              id(prevent_sleep).turn_on();
              //Prevent Sleep
              id(deep_sleep_1).prevent_deep_sleep();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
              delay(3000);
              id(testCycleCount) = 0;
              id(runTest) = true;
              id(testScript).execute();
            }
  - platform: homeassistant
    name: "OTA Mode"
    id: ota_mode
    entity_id: input_boolean.apollo_ota_mode
    on_press:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_release:  
      then:
        - if:
            condition:
              switch.is_off: prevent_sleep
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: dallas_temp
    name: "Soil Temperature"
    update_interval: 60s
    device_class: temperature
    id: soil_temperature
    icon: mdi:thermometer
    
  - platform: aht10
    id: aht_20
    variant: AHT20
    temperature:
      name: "Air Temperature"
      id: aht_temperature
      filters:
        - lambda: return x - id(aht_temperature_offset).state;
    humidity:
      name: "Air Humidity"
      id: aht_humidity
      filters:
        - lambda: return x - id(aht_humidity_offset).state;
    update_interval: 60s

  - platform: adc
    pin: GPIO4
    id: soil_adc
    attenuation: auto
    name: "Soil ADC"
    update_interval: 5s
    accuracy_decimals: 2
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: template
    name: "Soil Moisture"
    update_interval: 60s
    id: soil_moisture
    unit_of_measurement: "%"
    device_class: moisture
    icon: mdi:water
    lambda: |-
      // Get global calibration values
      float high = id(wet_voltage).state;
      float low = id(dry_voltage).state;
      float x = id(soil_adc).state;

      // Perform linear calibration manually
      float calibrated_value = ((100 - 0)/(high - low)) * x + (100 - (((100 - 0)/(high - low)) * high));
      
      // Bound the result between 0 and 100
      if (calibrated_value < 0) return 0;
      else if (calibrated_value > 100) return 100;
      else return calibrated_value;
    accuracy_decimals: 0

  - platform: ltr390
    id: ltr_390
    light:
      name: "LTR390 Light"
      id: ltr390light
    uv_index:
      name: "LTR390 UV Index"
      id: ltr390uvindex
    update_interval: 60s

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    rmt_channel: 0
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true
  - platform: template
    name: "Prevent Sleep"
    id: prevent_sleep
    icon: mdi:sleep
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_turn_off:
      then:
        - if:
            condition:
              binary_sensor.is_off: ota_mode
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();

script:
  - id: statusCheck
    then:
      - if:
          condition:
            - lambda: 'return id(ink_ha_connected).state;'
          then:
            - logger.log: "Apollo Automation: Connected To HA"
            - light.turn_on: 
                id: rgb_light
                brightness: 100%
                red: 0%
                green: 0%
                blue: 100%
          else:
            - if:
                condition:
                  - wifi.connected
                then:
                  - logger.log: "Apollo Automation: Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 0%
                      green: 100%
                      blue: 0%
                else:
                  - logger.log: "Apollo Automation: Not Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
      - delay: 5s
      - light.turn_off: rgb_light
  
  - id: testScript
    then:
      if: 
        condition:
          - lambda: "return id(runTest) == true;"
        then:
          - lambda: "id(runTest) = false;"
          - lambda: "id(testCycleCount) = 0;"
          - while:
              condition:
                - lambda: "return id(testCycleCount) < 5;"
              then:
                - if:
                    condition:
                      - lambda: "return id(ltr390lightPassed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return id(ltr390light).state > 10;"
                          then:
                            - lambda: "id(ltr390lightPassed) = true;"
                - if:
                    condition:
                      - lambda: "return id(ltr390uvindexPassed) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return !isnan(id(ltr390uvindex).state);"
                          then:
                            - lambda: "id(ltr390uvindexPassed) = true;"
                - if:
                    condition:
                      - lambda: "return id(aht20) == false;"
                    then:
                      - if:
                          condition:
                            - lambda: "return id(aht_temperature).state > 15;"
                          then:
                            - lambda: "id(aht20) = true;"

                - if:
                    condition:
                      - lambda: "return id(aht20) && id(ltr390lightPassed) && id(ltr390uvindexPassed);"
                    then:
                      - lambda: "id(testCycleCount) = 10;"
                - lambda: "id(runTest) = false;"
                - delay: 1s
                - lambda: "id(testCycleCount) += 1;"

          #Check If Test Passed To Trigger Lights
          - if:
              condition:
                - lambda: "return id(aht20) && id(ltr390lightPassed) && id(ltr390uvindexPassed);"
              then:
                - lambda: "id(runTest) = false;"
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 100%
                    blue: 0%
                - delay: 5s
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 0%
                    blue: 0%
                - light.turn_off:
                    id: rgb_light
                
              else:
                - lambda: "id(runTest) = false;"
                - light.turn_on:
                    id: rgb_light
                    red: 100%
                    green: 0%
                    blue: 0%
                - delay: 5s
                - light.turn_on:
                    id: rgb_light
                    red: 0%
                    green: 0%
                    blue: 0%
                - light.turn_off:
                    id: rgb_light




